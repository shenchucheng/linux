set nocompatible              " required

filetype off                  " required

let mapleader = ','

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" python
Plugin 'tmhedberg/SimpylFold'
Plugin 'tell-k/vim-autopep8'
Plugin 'heavenshell/vim-pydocstring'
Plugin 'Valloric/YouCompleteMe'
" js
Plugin 'mattn/emmet-vim'
Plugin 'marijnh/tern_for_vim'
Plugin 'heavenshell/vim-jsdoc'

Plugin 'altercation/vim-colors-solarized'
Plugin 'thaerkh/vim-workspace'
Plugin 'dyng/ctrlsf.vim'
Plugin 'scrooloose/nerdtree'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required

" Python
"Pydocstring
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
nmap <silent> <C-_> <Plug>(pydocstring)
" let g:pydocstring_formatter = 'numpy'

" Autopep8
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR> 
" YMC 补全设置
let g:ycm_min_num_of_chars_for_completion=1

"javascript
nnoremap <Leader>jd :JsDoc<CR>
vnoremap <leader>, I// <ESC>
iabbrev jsfi for (let i=0; i<0; i++){<CR>}
iabbrev jsfil for (let i=0, l=lo.length; i<l; i++){<CR>}


" emmet
autocmd FileType html,css,markdown EmmetInstall

" 配色方案
syntax enable
if has('gui_running')
    set background=light
else
    set background=dark
endif

"workspace autosession
let g:workspace_session_name = 'Session.vim'
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_persist_undo_history = 1  " enabled = 1 (default), disabled = 0
let g:workspace_undodir=$HOME . '/.vim/undo/'
nnoremap <leader>s :ToggleWorkspace<CR>


" 目录树
map <F4> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$'] "忽略文件


" paste模式
set pastetoggle=<F3>
set number
set scrolloff=6
set laststatus=2
" set splitbelow
" set splitright
set wildmenu
set mouse=
set backspace=2
set expandtab
" set list
" split navigations

" 窗口移动
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" 折叠
nnoremap <space> za

" Esc
inoremap <C-C> <Esc>

" 修改vimrc文件
nnoremap <F6> :split $MYVIMRC<cr>
inoremap <F6> <ESC>:w<cr>:source %<CR>

" set number toggle
nnoremap <F7> <ESC>:set number!<CR>

" set paste
set pastetoggle=<F3>



"Python
set filetype=python
au BufNewFile,BufRead .py,.pyw setf python
set autoindent "设置自动缩进
set smartindent "自动下一行缩进
set textwidth=79 "行最大宽度
set expandtab "tab替换为空格键
set tabstop=4 "设置table长度
set softtabstop=4 "软制表符宽度为4
set shiftwidth=4 "设置缩进的空格数为4
set fileformat=unix "设置以unix的格式保存文件
set foldmethod=indent "自动折叠
set foldlevel=79 "最多79个字符

"vim中F5直接调试
map <F5> :call RunPython()<CR>
func! RunPython()
exec "w"
if &filetype == 'python' "第一行#!/bin/python 运行python编译器
exec "!time python %"
elseif &filetype == 'sh' "第一行#!/bin/bash 运行shell编译器
:!time bash %
endif
endfunc

"全局搜索
let g:ctrlsf_ackprg = 'ag' 


"创建文件头
autocmd BufNewFile *.py,*.sh exec ":call SetTitle()"
func! SetTitle() 
    if &filetype == 'python'
        call setline(1,"#!/usr/bin/env python3")
        call append(line("."),"# -*- coding:UTF-8 -*-")
        call append(line(".")+1, "# File Name: ".expand("%"))
        call append(line(".")+2, "# Author: Shechucheng")
        call append(line(".")+3, "# Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".")+4, "")
        call append(line(".")+5, "")
        call AddIM()

    elseif &filetype == 'sh'
        call setline(1, "\#!/usr/bin/sh")

    elseif &filetype == 'plaintex'
        call setline(1,"% -*- coding:UTF-8 -*-")
         call append(line("."),"%#########################################################################")
        call append(line(".")+1, "% File Name: ".expand("%"))
        call append(line(".")+2, "% Author: stubborn vegeta")
        call append(line(".")+3, "% Created Time: ".strftime("%c"))
        call append(line(".")+4, "%#########################################################################")A
    endif

    normal Go 
endfunc

"python ifmain 
"在非__开头py文件添加ifmain
func! AddIM()
    if expand('%')[:1] != "__"
        call append(line(".")+6, "def main():")
        call append(line(".")+7, "    pass")
        call append(line(".")+8, "")
        call append(line(".")+9, "")
        call append(line(".")+10, "if __name__ == \"__main__\":")
        call append(line(".")+11, "    main()")
    endif
endfunc
